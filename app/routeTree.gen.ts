/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WinnerImport } from './routes/winner'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as CastsRouteImport } from './routes/casts.route'
import { Route as IndexImport } from './routes/index'
import { Route as CastsIndexImport } from './routes/casts.index'
import { Route as CastsPostIdImport } from './routes/casts.$postId'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as CastsPostIdDeepImport } from './routes/casts_.$postId.deep'
import { Route as PathlessLayoutNestedLayoutRulesEsImport } from './routes/_pathlessLayout/_nested-layout/rules-es'
import { Route as PathlessLayoutNestedLayoutRulesEnImport } from './routes/_pathlessLayout/_nested-layout/rules-en'

// Create/Update Routes

const WinnerRoute = WinnerImport.update({
  id: '/winner',
  path: '/winner',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const CastsRouteRoute = CastsRouteImport.update({
  id: '/casts',
  path: '/casts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CastsIndexRoute = CastsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CastsRouteRoute,
} as any)

const CastsPostIdRoute = CastsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => CastsRouteRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const CastsPostIdDeepRoute = CastsPostIdDeepImport.update({
  id: '/casts_/$postId/deep',
  path: '/casts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRulesEsRoute =
  PathlessLayoutNestedLayoutRulesEsImport.update({
    id: '/rules-es',
    path: '/rules-es',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRulesEnRoute =
  PathlessLayoutNestedLayoutRulesEnImport.update({
    id: '/rules-en',
    path: '/rules-en',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/casts': {
      id: '/casts'
      path: '/casts'
      fullPath: '/casts'
      preLoaderRoute: typeof CastsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/winner': {
      id: '/winner'
      path: '/winner'
      fullPath: '/winner'
      preLoaderRoute: typeof WinnerImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/casts/$postId': {
      id: '/casts/$postId'
      path: '/$postId'
      fullPath: '/casts/$postId'
      preLoaderRoute: typeof CastsPostIdImport
      parentRoute: typeof CastsRouteImport
    }
    '/casts/': {
      id: '/casts/'
      path: '/'
      fullPath: '/casts/'
      preLoaderRoute: typeof CastsIndexImport
      parentRoute: typeof CastsRouteImport
    }
    '/_pathlessLayout/_nested-layout/rules-en': {
      id: '/_pathlessLayout/_nested-layout/rules-en'
      path: '/rules-en'
      fullPath: '/rules-en'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRulesEnImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/rules-es': {
      id: '/_pathlessLayout/_nested-layout/rules-es'
      path: '/rules-es'
      fullPath: '/rules-es'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRulesEsImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/casts_/$postId/deep': {
      id: '/casts_/$postId/deep'
      path: '/casts/$postId/deep'
      fullPath: '/casts/$postId/deep'
      preLoaderRoute: typeof CastsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface CastsRouteRouteChildren {
  CastsPostIdRoute: typeof CastsPostIdRoute
  CastsIndexRoute: typeof CastsIndexRoute
}

const CastsRouteRouteChildren: CastsRouteRouteChildren = {
  CastsPostIdRoute: CastsPostIdRoute,
  CastsIndexRoute: CastsIndexRoute,
}

const CastsRouteRouteWithChildren = CastsRouteRoute._addFileChildren(
  CastsRouteRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRulesEnRoute: typeof PathlessLayoutNestedLayoutRulesEnRoute
  PathlessLayoutNestedLayoutRulesEsRoute: typeof PathlessLayoutNestedLayoutRulesEsRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRulesEnRoute:
      PathlessLayoutNestedLayoutRulesEnRoute,
    PathlessLayoutNestedLayoutRulesEsRoute:
      PathlessLayoutNestedLayoutRulesEsRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/casts': typeof CastsRouteRouteWithChildren
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/winner': typeof WinnerRoute
  '/casts/$postId': typeof CastsPostIdRoute
  '/casts/': typeof CastsIndexRoute
  '/rules-en': typeof PathlessLayoutNestedLayoutRulesEnRoute
  '/rules-es': typeof PathlessLayoutNestedLayoutRulesEsRoute
  '/casts/$postId/deep': typeof CastsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/winner': typeof WinnerRoute
  '/casts/$postId': typeof CastsPostIdRoute
  '/casts': typeof CastsIndexRoute
  '/rules-en': typeof PathlessLayoutNestedLayoutRulesEnRoute
  '/rules-es': typeof PathlessLayoutNestedLayoutRulesEsRoute
  '/casts/$postId/deep': typeof CastsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/casts': typeof CastsRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/winner': typeof WinnerRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/casts/$postId': typeof CastsPostIdRoute
  '/casts/': typeof CastsIndexRoute
  '/_pathlessLayout/_nested-layout/rules-en': typeof PathlessLayoutNestedLayoutRulesEnRoute
  '/_pathlessLayout/_nested-layout/rules-es': typeof PathlessLayoutNestedLayoutRulesEsRoute
  '/casts_/$postId/deep': typeof CastsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/casts'
    | ''
    | '/redirect'
    | '/winner'
    | '/casts/$postId'
    | '/casts/'
    | '/rules-en'
    | '/rules-es'
    | '/casts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/redirect'
    | '/winner'
    | '/casts/$postId'
    | '/casts'
    | '/rules-en'
    | '/rules-es'
    | '/casts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/casts'
    | '/_pathlessLayout'
    | '/redirect'
    | '/winner'
    | '/_pathlessLayout/_nested-layout'
    | '/casts/$postId'
    | '/casts/'
    | '/_pathlessLayout/_nested-layout/rules-en'
    | '/_pathlessLayout/_nested-layout/rules-es'
    | '/casts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CastsRouteRoute: typeof CastsRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  WinnerRoute: typeof WinnerRoute
  CastsPostIdDeepRoute: typeof CastsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CastsRouteRoute: CastsRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  RedirectRoute: RedirectRoute,
  WinnerRoute: WinnerRoute,
  CastsPostIdDeepRoute: CastsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/casts",
        "/_pathlessLayout",
        "/redirect",
        "/winner",
        "/casts_/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/casts": {
      "filePath": "casts.route.tsx",
      "children": [
        "/casts/$postId",
        "/casts/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/winner": {
      "filePath": "winner.tsx"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/rules-en",
        "/_pathlessLayout/_nested-layout/rules-es"
      ]
    },
    "/casts/$postId": {
      "filePath": "casts.$postId.tsx",
      "parent": "/casts"
    },
    "/casts/": {
      "filePath": "casts.index.tsx",
      "parent": "/casts"
    },
    "/_pathlessLayout/_nested-layout/rules-en": {
      "filePath": "_pathlessLayout/_nested-layout/rules-en.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/rules-es": {
      "filePath": "_pathlessLayout/_nested-layout/rules-es.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/casts_/$postId/deep": {
      "filePath": "casts_.$postId.deep.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
