/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WinnerImport } from './routes/winner'
import { Route as WhutImport } from './routes/whut'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as IndexImport } from './routes/index'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PathlessLayoutNestedLayoutRulesEsImport } from './routes/_pathlessLayout/_nested-layout/rules-es'
import { Route as PathlessLayoutNestedLayoutRulesEnImport } from './routes/_pathlessLayout/_nested-layout/rules-en'

// Create/Update Routes

const WinnerRoute = WinnerImport.update({
  id: '/winner',
  path: '/winner',
  getParentRoute: () => rootRoute,
} as any)

const WhutRoute = WhutImport.update({
  id: '/whut',
  path: '/whut',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const PathlessLayoutNestedLayoutRulesEsRoute =
  PathlessLayoutNestedLayoutRulesEsImport.update({
    id: '/rules-es',
    path: '/rules-es',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRulesEnRoute =
  PathlessLayoutNestedLayoutRulesEnImport.update({
    id: '/rules-en',
    path: '/rules-en',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/whut': {
      id: '/whut'
      path: '/whut'
      fullPath: '/whut'
      preLoaderRoute: typeof WhutImport
      parentRoute: typeof rootRoute
    }
    '/winner': {
      id: '/winner'
      path: '/winner'
      fullPath: '/winner'
      preLoaderRoute: typeof WinnerImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/_pathlessLayout/_nested-layout/rules-en': {
      id: '/_pathlessLayout/_nested-layout/rules-en'
      path: '/rules-en'
      fullPath: '/rules-en'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRulesEnImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/rules-es': {
      id: '/_pathlessLayout/_nested-layout/rules-es'
      path: '/rules-es'
      fullPath: '/rules-es'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRulesEsImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
  }
}

// Create and export the route tree

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRulesEnRoute: typeof PathlessLayoutNestedLayoutRulesEnRoute
  PathlessLayoutNestedLayoutRulesEsRoute: typeof PathlessLayoutNestedLayoutRulesEsRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRulesEnRoute:
      PathlessLayoutNestedLayoutRulesEnRoute,
    PathlessLayoutNestedLayoutRulesEsRoute:
      PathlessLayoutNestedLayoutRulesEsRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/whut': typeof WhutRoute
  '/winner': typeof WinnerRoute
  '/rules-en': typeof PathlessLayoutNestedLayoutRulesEnRoute
  '/rules-es': typeof PathlessLayoutNestedLayoutRulesEsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/whut': typeof WhutRoute
  '/winner': typeof WinnerRoute
  '/rules-en': typeof PathlessLayoutNestedLayoutRulesEnRoute
  '/rules-es': typeof PathlessLayoutNestedLayoutRulesEsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/whut': typeof WhutRoute
  '/winner': typeof WinnerRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/_pathlessLayout/_nested-layout/rules-en': typeof PathlessLayoutNestedLayoutRulesEnRoute
  '/_pathlessLayout/_nested-layout/rules-es': typeof PathlessLayoutNestedLayoutRulesEsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/redirect'
    | '/whut'
    | '/winner'
    | '/rules-en'
    | '/rules-es'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/redirect' | '/whut' | '/winner' | '/rules-en' | '/rules-es'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/redirect'
    | '/whut'
    | '/winner'
    | '/_pathlessLayout/_nested-layout'
    | '/_pathlessLayout/_nested-layout/rules-en'
    | '/_pathlessLayout/_nested-layout/rules-es'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  WhutRoute: typeof WhutRoute
  WinnerRoute: typeof WinnerRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  RedirectRoute: RedirectRoute,
  WhutRoute: WhutRoute,
  WinnerRoute: WinnerRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pathlessLayout",
        "/redirect",
        "/whut",
        "/winner"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/whut": {
      "filePath": "whut.tsx"
    },
    "/winner": {
      "filePath": "winner.tsx"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/rules-en",
        "/_pathlessLayout/_nested-layout/rules-es"
      ]
    },
    "/_pathlessLayout/_nested-layout/rules-en": {
      "filePath": "_pathlessLayout/_nested-layout/rules-en.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/rules-es": {
      "filePath": "_pathlessLayout/_nested-layout/rules-es.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    }
  }
}
ROUTE_MANIFEST_END */
